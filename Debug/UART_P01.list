
UART_P01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000025c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  4 .ARM          00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0001040c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000011d  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000b4  00000000  00000000  00010559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00010610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000038  00000000  00000000  00010660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b26  00000000  00000000  00010698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000613  00000000  00000000  000121be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007b96  00000000  00000000  000127d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001a367  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000084  00000000  00000000  0001a3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003d8 	.word	0x080003d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003d8 	.word	0x080003d8

080001d4 <main>:

//******************************************************************************************//
//********************************** BASIC CONFIGURATION************************************//
//******************************************************************************************//
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
	char msg[SIZE_MSG] = "hola";
 80001da:	4a3f      	ldr	r2, [pc, #252]	; (80002d8 <main+0x104>)
 80001dc:	463b      	mov	r3, r7
 80001de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e2:	6018      	str	r0, [r3, #0]
 80001e4:	3304      	adds	r3, #4
 80001e6:	7019      	strb	r1, [r3, #0]
 80001e8:	1d7b      	adds	r3, r7, #5
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	f8c3 200b 	str.w	r2, [r3, #11]
	msg[4]= 0XD;
 80001f6:	230d      	movs	r3, #13
 80001f8:	713b      	strb	r3, [r7, #4]
	msg[5]= 0XA;
 80001fa:	230a      	movs	r3, #10
 80001fc:	717b      	strb	r3, [r7, #5]
	int i;
	RCC_AHB2ENR  |= 0X00000002;																//Activate clock Port B
 80001fe:	4b37      	ldr	r3, [pc, #220]	; (80002dc <main+0x108>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a36      	ldr	r2, [pc, #216]	; (80002dc <main+0x108>)
 8000204:	f043 0302 	orr.w	r3, r3, #2
 8000208:	6013      	str	r3, [r2, #0]
	GPIO_MODER_R(GPIOB) &= ~0x0C000000;														//CLean MODER13
 800020a:	4b35      	ldr	r3, [pc, #212]	; (80002e0 <main+0x10c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a34      	ldr	r2, [pc, #208]	; (80002e0 <main+0x10c>)
 8000210:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000214:	6013      	str	r3, [r2, #0]
	GPIO_MODER_R(GPIOB) |=  0x04000000;														//LED PB13 as output
 8000216:	4b32      	ldr	r3, [pc, #200]	; (80002e0 <main+0x10c>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a31      	ldr	r2, [pc, #196]	; (80002e0 <main+0x10c>)
 800021c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000220:	6013      	str	r3, [r2, #0]

//******************************************************************************************//
//***********************************USART2 CONFIGURATION***********************************//
//******************************************************************************************//
	RCC_AHB2ENR  		|= 0X00000001;														//Activate clock Port A
 8000222:	4b2e      	ldr	r3, [pc, #184]	; (80002dc <main+0x108>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a2d      	ldr	r2, [pc, #180]	; (80002dc <main+0x108>)
 8000228:	f043 0301 	orr.w	r3, r3, #1
 800022c:	6013      	str	r3, [r2, #0]
	GPIO_MODER_R(GPIOA) &= ~0x000000F0;														//Clean MODER PA2 and PA3
 800022e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000238:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800023c:	6013      	str	r3, [r2, #0]
	GPIO_MODER_R(GPIOA) |= 0x000000A0;														//Alternate Function mode in PA2 and PA3
 800023e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000248:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800024c:	6013      	str	r3, [r2, #0]
	GPIO_AFRL_R(GPIOA)  |= 0x00007700;														//AF07 at PA2 and PA3
 800024e:	4b25      	ldr	r3, [pc, #148]	; (80002e4 <main+0x110>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a24      	ldr	r2, [pc, #144]	; (80002e4 <main+0x110>)
 8000254:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000258:	6013      	str	r3, [r2, #0]

	RCC_APB1ENR1 |= 0X00020000;																//Activate clock USART2
 800025a:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <main+0x114>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a22      	ldr	r2, [pc, #136]	; (80002e8 <main+0x114>)
 8000260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000264:	6013      	str	r3, [r2, #0]
	USART_CR1_R(UART2_BASE)  = 0x00000000;													//Clean USART2 configuration (Disable USART2)
 8000266:	4b21      	ldr	r3, [pc, #132]	; (80002ec <main+0x118>)
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
	USART_CR1_R(UART2_BASE) |=0x00000001;													//Enable USART-2
 800026c:	4b1f      	ldr	r3, [pc, #124]	; (80002ec <main+0x118>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a1e      	ldr	r2, [pc, #120]	; (80002ec <main+0x118>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6013      	str	r3, [r2, #0]
	USART_BRR_R(UART2_BASE)	|= 0x000001A0;													//Configure BaudRate
 8000278:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <main+0x11c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a1c      	ldr	r2, [pc, #112]	; (80002f0 <main+0x11c>)
 800027e:	f443 73d0 	orr.w	r3, r3, #416	; 0x1a0
 8000282:	6013      	str	r3, [r2, #0]
	USART_CR1_R(UART2_BASE) |=0x0000000C;													//Activate Transmitter & Receiver
 8000284:	4b19      	ldr	r3, [pc, #100]	; (80002ec <main+0x118>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a18      	ldr	r2, [pc, #96]	; (80002ec <main+0x118>)
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	6013      	str	r3, [r2, #0]
//******************************************************************************************//
//************************************ INFINITE CYCLE **************************************//
//******************************************************************************************//
	while(1)
	{
		for(i=0;i<=DELAY;i++);
 8000290:	2300      	movs	r3, #0
 8000292:	617b      	str	r3, [r7, #20]
 8000294:	e002      	b.n	800029c <main+0xc8>
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	3301      	adds	r3, #1
 800029a:	617b      	str	r3, [r7, #20]
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80002a2:	ddf8      	ble.n	8000296 <main+0xc2>
		GPIO_ODR_R(GPIOB) = 0x2000; 														//USER LED ON
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <main+0x120>)
 80002a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002aa:	601a      	str	r2, [r3, #0]
		for(i=0;i<=DELAY;i++);
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	e002      	b.n	80002b8 <main+0xe4>
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	3301      	adds	r3, #1
 80002b6:	617b      	str	r3, [r7, #20]
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80002be:	ddf8      	ble.n	80002b2 <main+0xde>
		GPIO_ODR_R(GPIOB) &= ~0X2000; 														//USER LED OFF
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <main+0x120>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <main+0x120>)
 80002c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002ca:	6013      	str	r3, [r2, #0]
		sendStringUART2(msg);
 80002cc:	463b      	mov	r3, r7
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f812 	bl	80002f8 <sendStringUART2>
		for(i=0;i<=DELAY;i++);
 80002d4:	e7dc      	b.n	8000290 <main+0xbc>
 80002d6:	bf00      	nop
 80002d8:	080003f0 	.word	0x080003f0
 80002dc:	4002104c 	.word	0x4002104c
 80002e0:	48000400 	.word	0x48000400
 80002e4:	48000020 	.word	0x48000020
 80002e8:	40021058 	.word	0x40021058
 80002ec:	40004400 	.word	0x40004400
 80002f0:	4000440c 	.word	0x4000440c
 80002f4:	48000414 	.word	0x48000414

080002f8 <sendStringUART2>:
		//while (!(USART_ISR_R(UART2_BASE) & 0x80));											//Wait to end of transmission
	}
}

void sendStringUART2(char *msg)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
    while(*msg)
 8000300:	e00c      	b.n	800031c <sendStringUART2+0x24>
    {
		//Wait to end of transmission
    	 USART_TDR_R(UART2_BASE) = *msg++;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	1c5a      	adds	r2, r3, #1
 8000306:	607a      	str	r2, [r7, #4]
 8000308:	781a      	ldrb	r2, [r3, #0]
 800030a:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <sendStringUART2+0x3c>)
 800030c:	601a      	str	r2, [r3, #0]
    	 while (!(USART_ISR_R(UART2_BASE) & 0x80));
 800030e:	bf00      	nop
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <sendStringUART2+0x40>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f9      	beq.n	8000310 <sendStringUART2+0x18>
    while(*msg)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d1ee      	bne.n	8000302 <sendStringUART2+0xa>
    }
}
 8000324:	bf00      	nop
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40004428 	.word	0x40004428
 8000338:	4000441c 	.word	0x4000441c

0800033c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000340:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <LoopForever+0x6>)
  ldr r1, =_edata
 8000346:	490d      	ldr	r1, [pc, #52]	; (800037c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <LoopForever+0xe>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800035c:	4c0a      	ldr	r4, [pc, #40]	; (8000388 <LoopForever+0x16>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036a:	f000 f811 	bl	8000390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036e:	f7ff ff31 	bl	80001d4 <main>

08000372 <LoopForever>:

LoopForever:
  b LoopForever
 8000372:	e7fe      	b.n	8000372 <LoopForever>
  ldr   r0, =_estack
 8000374:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000380:	0800040c 	.word	0x0800040c
  ldr r2, =_sbss
 8000384:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000388:	2000001c 	.word	0x2000001c

0800038c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC1_IRQHandler>
	...

08000390 <__libc_init_array>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	4d0d      	ldr	r5, [pc, #52]	; (80003c8 <__libc_init_array+0x38>)
 8000394:	4c0d      	ldr	r4, [pc, #52]	; (80003cc <__libc_init_array+0x3c>)
 8000396:	1b64      	subs	r4, r4, r5
 8000398:	10a4      	asrs	r4, r4, #2
 800039a:	2600      	movs	r6, #0
 800039c:	42a6      	cmp	r6, r4
 800039e:	d109      	bne.n	80003b4 <__libc_init_array+0x24>
 80003a0:	4d0b      	ldr	r5, [pc, #44]	; (80003d0 <__libc_init_array+0x40>)
 80003a2:	4c0c      	ldr	r4, [pc, #48]	; (80003d4 <__libc_init_array+0x44>)
 80003a4:	f000 f818 	bl	80003d8 <_init>
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	10a4      	asrs	r4, r4, #2
 80003ac:	2600      	movs	r6, #0
 80003ae:	42a6      	cmp	r6, r4
 80003b0:	d105      	bne.n	80003be <__libc_init_array+0x2e>
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b8:	4798      	blx	r3
 80003ba:	3601      	adds	r6, #1
 80003bc:	e7ee      	b.n	800039c <__libc_init_array+0xc>
 80003be:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c2:	4798      	blx	r3
 80003c4:	3601      	adds	r6, #1
 80003c6:	e7f2      	b.n	80003ae <__libc_init_array+0x1e>
 80003c8:	08000404 	.word	0x08000404
 80003cc:	08000404 	.word	0x08000404
 80003d0:	08000404 	.word	0x08000404
 80003d4:	08000408 	.word	0x08000408

080003d8 <_init>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr

080003e4 <_fini>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr
